#########################################################################################################################################################
# This file will be used to load the necessary settings for executing the genetic algorithm. In case of non-standard filling, an error will be thrown.	#
# Each line that starts with a # will explain the data to be informed. 																				  	#
# On the next line, the field name will be displayed followed by a colon, the field type, another colon and the field value.					      	#
# Example: Name_Of_Field:int:10																														  	#
# Do not change the field name or type.																												  	# 
#########################################################################################################################################################
#
#Field Name: initialPopulation. Type: int. Description: enter your initial population size.
initialPopulation:int:200
#
#Field Name: mutationRate. Type: double. Description: enter mutation rate used by AG.
mutationRate:double:2.0
#
#Field Name: crossoverRate. Type: double. Description: enter crossover rate used by AG.
crossoverRate:double:80.0
#
#Field Name: iterations. Type: int. Description: enter the number of iterations that the AG will run.
iterations:int:20
#
#Field Name: generations. Type: int. Description: enter the number of generations the AG will run in each iteration.
generations:int:500
#
#Field Name: metric. Type: int. Description: enter the type of metric you want to use: 0 for Makespan, 1 for LoadBalance, 2 for FlowTime, 3 for CommunicationCost and 4 for WaitingTime.
metric:int:0
#
#Field Name: mutation. Type: int. Description: enter the type of mutation you want to use: 0 for 1 Point or 1 for 2 Points.
#Explanation: 
#1 Point: select a processor and switch to another that was raffled.
#2 Points: selects two processors and swaps one for the other. If they are the same, we choose one to mater and raffle the second again until it is different from the first.
mutation:int:0
#
#Field Name: selection. Type: int. Description: enter the type of selection you want to use: 0 for Roulette, 1 for Simple_Tournament, 2 for Stochastic_Tournament, 3 for Linear_Ranking and 4 for Non_linear_Ranking.
selection:int:0
#
#Field Name: type. algorithm: int. Description: enter the type of algorithm you want to run: 0 for Single Objective, 1 for NSGAII, 2 for SPEAII, 3 for AEMMT, and 4 for AEMMD.
algorithm:int:3
#
#Field Name: tourForTournament. Type: int. Description: enter the number of tours that must be carried out for the tournament selection type (If the tournament type is roulette, the value entered here will not be used).
tourForTournament:int:3
#
#Field Name: totalProcessors. Type: int. Description: enter the number of processors that will run the tasks.
totalProcessors:int:3
#
#Field Name: printIterations. Type: boolean. Description: enter if you want to print the iterations of the AG to follow the processing.
printIterations:boolean:false
#
#Field Name: printGenerations. Type: boolean. Description: enter if you want to print the generations of the AG to follow the processing.
printGenerations:boolean:false
#
#Field Name: testMode. Type: boolean. Description: enter if you want to print the information in debug mode: true for yes and false for no.
testMode:boolean:false
#
#Field Name: maximizationConstant. Type: double. Description: Enter a number higher than zero as the constant to be used to transform the problem into maximization or enter 0 when the problem is already of this type.
#Example: for the makespan, the lower its value, the better the individual. So, assuming that the makespan value of a chromosome is 16, and this constant is 1, we use the following formula to calculate the fitness: constant / 16 -> 1 / 16 = 0.0625. 
#A second chromosome with makespan equal to 20 has the following fitness: 1 / 20 = 0.05. The first chromosome has higher fitness, so it is a better solution than the second.
#Example 2: for the makespan, the lower its value, the better the individual. So, assuming that the makespan value of a chromosome is 67000, and this constant is 1, we use the following formula to calculate the fitness: constant / 67000 -> 1 / 67000 -> The result is a very small number. So you need to use a bigger number. For example: 1000.
#So we have: 1000 / 67000 = 0,01492537
maximizationConstant:int:1
#maximizationConstant:int:1000
#
#Field Name: attemptSelectParentNotRepeated. Type: int. Description: enter the number of attempts that must be performed for the AG to select a non-repeating parent chromosome. If one is informed, the AG will use the first selected chromosome.
attemptSelectParentNotRepeated:int:1
#
#Field Name: stopGenerationIfFindBestSolution. Type: boolean. Description: enter if you want to stop the AG execution if it finds the best chromosome: true for yes and false for no.
stopGenerationIfFindBestSolution:boolean:false
#
#Field Name: allowApplyingMutationOnRepeatedChild. Type: boolean. Description: enter if you want to stop the AG execution if it finds the best chromosome: true for yes and false for no.
allowApplyingMutationOnRepeatedChild:boolean:false
#
#Field Name: printBestChromosomeOfGeneration. Type: boolean. Description: enter if you want to print the best chromosome of the generation.
printBestChromosomeOfGeneration:boolean:false
#
#Field Name: convergenceForTheBestSolution. Type: boolean. Description: enter if you want to consider as generation success only if the optimal solution is reached.
convergenceForTheBestSolution:boolean:false
#
#Field Name: taskGraphFileName. Type: string. Description: enter the name of the file containing the randomly generated graph in .stg format or enter -1 to get the default graph.
#Important: if the graph has tasks with a very high communication cost, greater than 1000 for example, consider setting the maximizationConstant variable. 
taskGraphFileName:string:-1
#taskGraphFileName:string:rand0000-without-communication-costs-50-tasks.stg
#taskGraphFileName:string:rand0055-without-communication-costs-100-tasks.stg
#taskGraphFileName:string:rand0105-without-communication-costs-300-tasks.stg
#taskGraphFileName:string:sample-with-communication-costs-10-tasks.stg
#taskGraphFileName:string:rand0000-with-communication-costs-50-tasks.stg
#taskGraphFileName:string:rand0055-with-communication-costs-100-tasks.stg
#taskGraphFileName:string:rand0105-with-communication-costs-300-tasks.stg
#taskGraphFileName:string:teste.stg
#
#Field Name: graphWithCommunicationCost. Type: boolean. Description: enter if the graph in .stg format used has a communication cost.
graphWithCommunicationCost:boolean:true
#
#Field Name: generateRandomCommunicationCostForNoCostDag. Type: boolean. Description: enter if you want to generate a random communication cost for a DAG with no communication cost.
#Communication costs will be randomly generated with values between the lowest computational cost of a DAG task and the highest computational cost of a DAG task (inclusive).
generateRandomCommunicationCostForNoCostDag:boolean:false
#
#Field Name: generateCommunicationCostFromDAGWithoutCommunicationCost. Type: boolean. Description: enter if you want to generate DAG with communication cost from DAG without communication cost.  
generateCommunicationCostFromDAGWithoutCommunicationCost:boolean:false
#
#Field Name: printGraphAtTheBeginningOfRun. Type: boolean. Description: enter if the graph will be printed at the beginning.  
printGraphAtTheBeginningOfRun:boolean:false
#
#Field Name: printBest. Type: boolean. Description: enter if you want to print the best results obtained in all iterations for each of the analyzed objectives individually.  
printBestResultsByObjectives:boolean:true
#
#Field Name: seed. Type: int. Description: enter an integer seed value to be used in the Random object responsible for generating the data randomly. If you want a random generation at each execution, enter -1.  
seed:int:-1995383100
#
#Field Name: systemOutPrintInFile. Type: boolean. Description: enter if you want to generate the System.out.println in a file and not in the console.  
systemOutPrintInFile:boolean:true
#
#########################################################################################################################################################
# The parameters below will be used if you want to run the multi-objective genetic algorithm.														  	#
#########################################################################################################################################################
#
#Field Name: totalObjectives. Type: int. Description: enter the number of objectives used.  
totalObjectives:int:5
#
#Field Name: sizeOfTables. Type: int. Description: enter the size of the tables.
sizeOfTables:int:30
#
#Field Name: sizeOfNonDominatedTable. Type: int. Description: enter the size of non-dominated table.  
sizeOfNonDominatedTable:int:100
#
#Field Name: totalGenerations. Type: int. Description: enter the total number of generations.  
totalGenerations:int:15000
#
#Field Name: totalGenerationsToResetTableScore. Type: int. Description: enter the total number of generations to reset the tables' score or enter a value less than zero to disregard this reset.  
totalGenerationsToResetTableScore:int:100
#
#Field Name: printComparisonNonDominatedChromosomes. Type: boolean. Description: enter if you want to print the comparison of the non-dominated chromosomes with the surviving chromosomes of each of the tables.  
printComparisonNonDominatedChromosomes:boolean:false
#
#Field Name: totalGenerationsToApplyMutation. Type: int. Description: enter the total number of generations to apply the mutation to a spawned child, or enter a value less than zero to disregard this mutation.  
totalGenerationsToApplyMutation:int:500
#
#Field Name: sortFunction. Type: int. Description: enter the type of sort function you want to run: 0 for Weight, 1 for Simple Average and 2 for Harmonic Average.
#Enter 0 if you want to use weights to calculate the weighted average function that will be used to sort the chromosomes in the table and decide whether or not a chromosome should be in the table.  
#If enter 1 or 2, a normalization of the data will be performed (1 for SimpleAverage or 2 for HarmonicAverage). For this, it will be necessary to create a file with the same name as the DAG used to generate the chromosomes with the text normalization- prefix and the file extension must be .txt. 
#This file will inform the maximum and minimum values of each objective.  
#Example: if the filename of the DAG is RandomTaskGraphWithoutCommunicationCosts.stg then the filename with the max and min should be normalization-RandomTaskGraphWithoutCommunicationCosts.txt
#To calculate the maximums and minimums, set the variable calculateMaximusAndMinimusForNormalization to true and run the algorithm.
sortFunction:int:2
#
#Field Name: calculateMaximusAndMinimusForNormalization. Type: boolean. Description: enter if you want to calculate the maximum and minimum values found by objective to use them in AG AEMMT through data normalization and not through pre-established weights.  
calculateMaximusAndMinimusForNormalization:boolean:false
#
#Field Name: objective1. Type: int. Description: enter the type of objective 1: 0 for Makespan, 1 for LoadBalance, 2 for FlowTime, 3 for CommunicationCost and 4 for WaitingTime.  
objective1:int:0
#
#Field Name: objective2. Type: int. Description: enter the type of objective 2: 0 for Makespan, 1 for LoadBalance, 2 for FlowTime, 3 for CommunicationCost and 4 for WaitingTime.  
objective2:int:1
#
#Field Name: objective3. Type: int. Description: enter the type of objective 3: 0 for Makespan, 1 for LoadBalance, 2 for FlowTime, 3 for CommunicationCost and 4 for WaitingTime.  
objective3:int:2
#
#Field Name: objective4. Type: int. Description: enter the type of objective 4: 0 for Makespan, 1 for LoadBalance, 2 for FlowTime, 3 for CommunicationCost and 4 for WaitingTime.  
objective4:int:3
#
#Field Name: objective5. Type: int. Description: enter the type of objective 5: 0 for Makespan, 1 for LoadBalance, 2 for FlowTime, 3 for CommunicationCost and 4 for WaitingTime.  
objective5:int:4
#
#Field Name: weight1. Type: double. Description: enter the weight of objective 1.  
weight1:double:0.4
#
#Field Name: weight2. Type: double. Description: enter the weight of objective 2.  
weight2:double:0.3
#
#Field Name: weight3. Type: double. Description: enter the weight of objective 3.  
weight3:double:0.2
#
#Field Name: weight4. Type: double. Description: enter the weight of objective 4.  
weight4:double:0.1
#
#Field Name: weight5. Type: double. Description: enter the weight of objective 5.  
weight5:double:0.1
#
#########################################################################################################################################################
# The parameters below will be used if you want to run the genetic algorithm and generate a .csv file with the values of all objective functions per  	#
# chromosome. These parameters take priority. Once configured, the AG will generate only the initial population randomly, generate the file and		  	#		 
# finish the execution.																																  	#
# 3 files will be generated:																														  	#
# -> file-differentChromosomesObjective.csv: file with the objectives of the different chromosomes generated.											#
# -> file-differentChromosomes.csv: file with the different chromosomes generated.																		#
# -> file-repeatedChromosomes.csv: file with repeated chromosomes generated and ignored during execution.												#
#########################################################################################################################################################
#
#Field Name: generateCsvFile. Type: boolean. Description: enter if you want to generate the .csv file with the objectives by individual.  
generateCsvFile:boolean:false
#
#Field Name: totalDifferentChromosomes. Type: int. Description: enter the total number of different chromosomes to be generated.  
totalDifferentChromosomes:int:10000
#
#Field Name: maximumAttemptsGenerateDifferentChromosomes. Type: int. Description: enter the number of maximum attempts that the AG will perform to try to generate the total number of different chromosomes.  
maximumAttemptsGenerateDifferentChromosomes:int:11000
#